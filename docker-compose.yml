# The 2.4 spec is available for Docker versions >= 17.12.0, and it's great for
# development in local environments (i.e. using `docker-compose` instead of
# "swarm mode" commands like `docker stack deploy`), as it lets us specify
# resource constraints such as memory limits on service containers. We can use
# those constraints to replicate low-memory scenarios or debug memory usage in
# our apps:
version: '2.4'

volumes:
  postgres_data:

networks:
  backend:
  frontend:

services:
  postgres:
    image: postgres:10-alpine
    ports:
      # We'll bind our host's port 5432 (which can be changed with the
      # DEMO_PGPORT variable using a dotenv file) to postgres's port 5432, so
      # we can use our database IDEs with it:
      - ${DEMO_PGPORT:-5432}:5432
    volumes:
      # Mount the postgres data volume so the databases get persisted:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
    networks:
      - backend
    mem_limit: 128m
    environment:
      POSTGRES_PASSWORD: 3x4mpl3P455w0rd

  backend_test: &backend_app
    image: vovimayhem/ember-fastboot-demo-backend:development
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    labels:
      com.icalialabs.plis.group: test
    entrypoint: /usr/src/bin/dev-entrypoint
    volumes:
      # Mount the backend app code directory ("./backend") into the app
      # containers at the "/usr/src" folder:
      - type: bind
        source: ./backend
        target: /usr/src

    networks:
      - backend

    # Keep the stdin open, so we can attach to our app container's process
    # and do things such as byebug, etc:
    stdin_open: true

    # Enable sending signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true

    depends_on:
      - postgres

    command: guard

    environment: &backend_app_env
      # URL to connect to the database:
      DATABASE_URL: postgres://postgres:3x4mpl3P455w0rd@postgres:5432/demo_test
      RAILS_ENV: test
      RACK_ENV: test
      RAILS_LOG_TO_STDOUT: "true"

  backend_web:
    <<: *backend_app
    labels:
      com.icalialabs.plis.group: demo backend
    command: rails server -p 3000 -b 0.0.0.0
    ports:
      - ${DEMO_BACKEND_WEB_PORT:-3000}:3000
    networks:
      - backend
      - frontend
    environment:
      <<: *backend_app_env
      # Override the URL for the development database - we'll use oauth_provider_development:
      DATABASE_URL: postgres://postgres:3x4mpl3P455w0rd@postgres:5432/demo_development
      RAILS_ENV: development
      RACK_ENV: development

  # ================================================================================================
  # Containers / Services for the Frontend App:
  frontend_test: &frontend_app
    labels:
      com.icalialabs.plis.group: test
    build: &frontend_app_build
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    image: vovimayhem/ember-fastboot-demo-frontend:development
    volumes:
      # Mount the frontend code directory into the container's "/usr/src" folder:
      - ./frontend:/usr/src
    entrypoint: /usr/src/bin/dev-entrypoint
    command: ember test --server
    ports:
      - ${DEMO_FRONTEND_TEST_PORT:-7357}:7357
    environment: &frontend_env
      DEMO_BACKEND_URL: ${DEMO_BACKEND_URL:-http://localhost:3000}

  frontend_web:
    <<: *frontend_app
    labels:
      com.icalialabs.plis.group: dev
    command: ember server --live-reload-port 35730
    networks:
      - frontend
    ports:
      - ${DEMO_FRONTEND_WEB_PORT:-4200}:4200
      - ${DEMO_FRONTEND_LIVE_RELOAD_PORT:-35730}:35730
    depends_on:
      - backend_web
    stdin_open: true
    tty: true
    labels:
      com.icalialabs.plis.group: demo frontend

  frontend_web_staging:
    image: vovimayhem/ember-fastboot-demo-frontend:latest
    build:
      <<: *frontend_app_build
      target: release
    entrypoint: ["/usr/src/bin/staging-entrypoint"]
    volumes:
      - type: bind
        source: ./frontend/bin/staging-entrypoint
        target: /usr/src/bin/staging-entrypoint
    networks:
      - frontend
    ports:
      - ${DEMO_FRONTEND_WEB_STAGING_PORT:-4201}:4200
    depends_on:
      - backend_web
    stdin_open: true
    tty: true
    labels:
      com.icalialabs.plis.group: demo staging
    environment:
      <<: *frontend_env
      HOST_WHITELIST: ${DEMO_FRONTEND_WEB_STAGING_HOST:-localhost}:${DEMO_FRONTEND_WEB_STAGING_PORT:-4201}
      